buildscript {

    ext {
        springBootVersion = '2.4.5'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

plugins {
    id 'com.google.cloud.tools.jib' version '3.1.2' apply(false)
}

def admin = project(":redirect-admin")
def api = project(":redirect-api")
def core = project(":redirect-core")
def multiModules = [admin, api, core]

configure(multiModules) {

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.google.cloud.tools.jib'

    group = 'com.emart'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'
    compileJava.options.encoding = 'UTF-8'


    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.security:spring-security-test'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

    }

    test {
        useJUnitPlatform()
    }

    clean {
        delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
    }

    bootJar {
        //archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}
    }

    jib {
        from {
            image = "adoptopenjdk/openjdk11:x86_64-alpine-jre-11.0.11_9"
        }
        to {
            image = "m2162003/emart2-redirect"
            credHelper = 'osxkeychain'
            tags = ['latest']
        }
        container {
            jvmFlags = ["-Xms128m", "-Xmx128m"]

        }
    }

}


task cleanGeneratedDir(type: Delete) {
    description = "clean dir"
    delete file('src/main/generated')
}

/**  settings for docker **/
task dockerDownAll(type:Exec) {
    description = "docker-compose down"
    commandLine 'docker-compose', 'down'
}

task dockerRunAll(type:Exec) {
    dependsOn dockerDownAll

    description = "jib docker build"
    dependsOn subprojects.jibDockerBuild

    description = "docker-compose up"
    commandLine 'docker-compose', 'up', '-d'
}

/** admin 이미지 빌드 **/
task dockerRunAdmin(type:Exec){
    description = "redirect-admin jib in local daemon"
    commandLine './gradlew', ':redirect-admin:jibDockerBuild','--image=m2162003/redirect-admin'

}

/** api 이미지 빌드
 * 실행방법 : ./gradlew dockerRunApi **/
task dockerRunApi(type:Exec){
    description = "redirect-api jib in local daemon"
    commandLine './gradlew', ':redirect-api:jibDockerBuild','--image=m2162003/redirect-api'

}


